sqrt(2) ^ 2 == 2
#> [1] FALSE
1 / 49 * 49 == 1
#> [1] FALSE
near(sqrt(2) ^ 2,  2)
#> [1] TRUE
near(1 / 49 * 49, 1)
#> [1] TRUE
filter(flights, month == 11 | month == 12)
filter(flights, month == 11 | month == 12)
filter(flights, month %in% c(11,12))
filter(flights, month in c(11,12))
filter(flights, month %in% c(11,12))
nov_dec <- filter(flights, month %in% c(11,12))
nov_dec
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
#> [1] NA
#> [1] NA
NA + 10
#> [1] NA
10 == NA
#> [1] NA
NA + 10
#> [1] NA
NA / 2
#> [1] NA
#> [1] NA
NA / 2
```{r}
x <- NA
is.na(x)
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
filter(df, is.na(x) | x > 1)
arrange(flights, year, month, day)
arragne(flights, desc(dep_delay))
arrange(flights, desc(dep_delay))
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
#> # A tibble: 3 x 1
#>       x
#>   <dbl>
#> 1     2
#> 2     5
#> 3    NA
arrange(df, desc(x))
#> # A tibble: 3 x 1
#>       x
#>   <dbl>
#> 1     5
#> 2     2
#> 3    NA
select(flights, year, month, day)
# Select columns by name
select(flights, year, month, day)
# Select columns by range
select(flights, year:day)
# Select columns by name
select(flights, year, month, day)
# Select columns by range
select(flights, year:dep_delay)
# Select columns by name
select(flights, year, month, day)
# Select columns by range
select(flights, year:dep_delay)
# Select all columns except those specified
select(flights, -(year:dep_delay))
# Select columns by name
select(flights, year, month, day)
# Select columns by range
select(flights, year:dep_delay)
# Select all columns except those specified
select(flights, ~(year:dep_delay))
# Select columns by name
select(flights, year, month, day)
# Select columns by range
select(flights, year:dep_delay)
# Select all columns except those specified
select(flights, !(year:dep_delay))
# Select columns by name
select(flights, year, month, day)
# Select columns by range
select(flights, year:dep_delay)
# Select all columns except those specified
select(flights, -(year:dep_delay))
select(flights, contains('time'))
flights.columns
flights
rename(flights, tail_num = tailnum)
flights
rename(flights, test = tailnum)
select(flights, time_hour, day_time, everything())
select(flights, time_hour, air_time, everything())
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time)
flights_sml
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time)
flights_sml
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60)
mutate(fights_sml,
gain = dep_depay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
mutate(flights_sml,
gain = dep_depay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
transmute(flights,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
transmute(flights,
dep_time,
hour = dep_time %/% 100,
minute = dep_time %% 100)
(x <- 1:10)
#>  [1]  1  2  3  4  5  6  7  8  9 10
lag(x)
#>  [1] NA  1  2  3  4  5  6  7  8  9
lead(x)
#>  [1]  2  3  4  5  6  7  8  9 10 NA
(x <- 1:10)
#>  [1]  1  2  3  4  5  6  7  8  9 10
lag(x)
#>  [1] NA  1  2  3  4  5  6  7  8  9
lead(x)
#>  [1]  2  3  4  5  6  7  8  9 10 NA
?lag
x
#>  [1]  1  2  3  4  5  6  7  8  9 10
cumsum(x)
#>  [1]  1  3  6 10 15 21 28 36 45 55
cummean(x)
#>  [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5
y <- c(1, 2, 2, NA, 3, r)
y <- c(1, 2, 2, NA, 3, 4)
min_rank(y)
min_rank(desc(y))
flights
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
(by_day <- group_by(flights, year, month, day))
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
(by_dest <- group_by(flights, dest))
(delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
))
(delay <- filter(delay, count > 20, dest != "HNL"))
# It looks like delays increase with distance up to ~750 miles
# and then decrease. Maybe as flights get longer there's more
# ability to make up delays in the air?
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
# It looks like delays increase with distance up to ~750 miles
# and then decrease. Maybe as flights get longer there's more
# ability to make up delays in the air?
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = TRUE)
delays <- flgihts %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest !- "HNL")
delays <- flgihts %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
(delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL"))
install.packages("ggvis")
install.packages("mice")
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
not_cancelled <- flights %>% filter(!is.na(dep_delay), !is.na(arr_delay)) # filter out those not_cancelled flights
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping=aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping=aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
# Convert to a tibble so it prints nicely
batting <- as_tibble(Lahman::Batting)
batters <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_plot() +
geom_smooth(se = FALSE)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(
avg_delay1 = mean(arr_delay),
avg_delay2 = mean(arr_delay[arr_delay > 0]) # the average positive delay
)
# Why is distance to some destinations more variable than to others?
not_cancelled %>%
group_by(dest) %>%
summarise(distance_sd = sd(distance)) %>%
arrange(desc(distance_sd))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(
first = min(dep_time),
last = max(dep_time)
)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(
first_dep = first(dep_time),
last_dep = last(dep_time)
)
not_cancelled %>%
group_by(year, month, day) %>%
mutate(r = min_rank(desc(dep_time))) %>%
filter(r %in% range(r))
# Which destinations have the most carriers?
not_cancelled %>%
group_by(dest) %>%
summarise(carriers = n_distinct(carrier)) %>%
arrange(desc(carriers))
not_cancelled %>%
count(dest)
not_cancelled %>%
count(tailnum, wt = distance)
# How many flights left before 5am? (these usually indicate delayed
# flights from the previous day)
not_cancelled %>%
group_by(year, month day) %>%
# How many flights left before 5am? (these usually indicate delayed
# flights from the previous day)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(n_early = sum(dep_time < 500))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(hour_prop = mean(arr_delay) > 60)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(hour_prop = mean(arr_delay > 60))
(per_day <- summarise(daily, fights = n()))
daily <- group_by(flights, year, month, day)
(per_day <- summarise(daily, fights = n()))
install.packages("mice")
library(mice)
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
Sys.setlocale("LC_ALL", "C")
8 * 6
2^15
2^16
8 * 10
sqrt(2)
abs(-10)
?sqrt
SquareRoot2 = sqrt(2)
SquareRoot2
ls()
model4 = lm(Price ~ AGST + HarvestRain + WinterRain + Age, data = wine)
wine <- read.csv('wine.csv')
model4 = lm(Price ~ AGST + HarvestRain + WinterRain + Age, data = wine)
summary(model4)
mod = lm(Price ~ HarvestRain + WinterRain, data=wine)
summary(mod)
cor(wine$WinterRain, wine$Price)
cor(wine$WinterRain, wine$Price)
cor(wine$Age, wine$FrancePop)
cor(wine$WinterRain, wine$Price)
cor(wine$Age, wine$FrancePop)
cor(wine)
model5 = lm(Price ~ WinterRain + AGST + HarvestRain, data = wine)
summary(model5)
cor(wine$HarvestRain, wine$WinterRain)
wine_test = read.csv("wine_test.csv")
wine_test = read.csv("wine_test.csv")
str(wine_test)
predictTest = predict(model4, newdata = wine_test)
predictTest
SSE
SSE = sum((wine_test$Price - predictTest)^2)
SSE
SSE = sum((wine_test$Price - predictTest)^2)
SST = sum((wine_test$Price - mean(wine$Price))^2)
SSE
SST
SSE = sum((wine_test$Price - predictTest)^2)
SST = sum((wine_test$Price - mean(wine$Price))^2)
SSE
SST
1 - SSE/SST
baseball = read.csv('baseball.csv')
setwd("~/Downloads")
baseball = read.csv("baseball.csv")
str(baseball)
getwd()
baseball = read.csv("baseball.csv")
baseball = read.csv("baseball.csv")
setwd("~/Downloads")
baseball = read.csv("baseball.csv")
setwd("~/Downloads")
baseball = read.csv("baseball.csv")
str(baseball)
moneyball = subset(baseball, Year < 2002)
str(moneyball)
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
plot(moneyball$RD, moneyball$W)
WinsReg = lm(W ~ RD, data = moneyball)
summary(WinsReg)
WinsReg$coefficients
WinsReg$coefficients$RD
WinsReg$coefficients['RD']
WinsReg$coefficients['RD'] * 10
WinsReg$coefficients
WinsReg$coefficients['Intercept']
WinsReg$coefficients[0]
WinsReg$coefficients
80.881375 +  WinsReg$coefficients['RD'] * (713-614)
str(moneyvball)
str(moneyball)
RunsReg = lm(RS ~ OBP + SLG + BA, data = moneyball)
summary(RunsReg)
RunsReg = lm(RS ~ OBP + SLG , data = moneyball)
summary(RunsReg)
-804.63 + 2737.77 * 0.311 + 1584.91 * 0.405
str(moneyball)
reg = lm(RA ~ OOBP + OSLG, data=moneyball)
summary(reg)
-837.38 + 2913.60 * 0.297 + 1514.29 * 0.370
climate = read.csv("climate_change.csv")
setwd("~/_Course/AnalyticsEdge/Unit2")
climate = read.csv("climate_change.csv")
str(climate)
climate_train = subset(climate, Year <= 2006)
climate_test = subset(climate, Year > 2006)
climate = read.csv("climate_change.csv")
climate_train = subset(climate, Year <= 2006)
climate_test = subset(climate, Year > 2006)
reg = lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI, data = climate_train)
reg = lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data = climate_train)
summary(reg)
cor(climate_train)
reg2 = lm(Temp ~ MEI + TSI + Aerosols + N2O, data = climate_train)
summary(reg2)
2.532e-02
stepreg = step(reg)
summary(stepreg)
summary(reg)
prediction = predict(stepreg, newdata = climate_test)
SSE = sum((prediction - climate_test$Temp)^2)
SST = sum((mean(climate_test$Temp) - climate_test$Temp)^2)
1 - SSE / SST
SST = sum((mean(climate$Temp) - climate_test$Temp)^2)
1 - SSE / SST
prediction = predict(stepreg, newdata = climate_test)
SSE = sum((prediction - climate_test$Temp)^2)
SST = sum((mean(climate$Temp) - climate_test$Temp)^2)
R2 = 1 - SSE / SST
R2
SST = sum((mean(climate_test$Temp) - climate_test$Temp)^2)
R2 = 1 - SSE / SST
R2
prediction
prediction - climate_test$Temp
(prediction - climate_test$Temp)^2
SSE
SST
R2
R2 = 1 - SSE / SST
R2
SSE / SST
SST
SST = sum((mean(climate$Temp) - climate_test$Temp)^2)
SST
climate$Temp
mean(climate$Temp)
mean(climate$Temp) - climate_test$Temp
SSE = sum((prediction - climate_test$Temp)^2)
SST = sum((mean(climate$Temp) - climate_test$Temp)^2)
R2 = 1 - SSE / SST
R2
SST = sum((mean(climate_train$Temp) - climate_test$Temp)^2)
R2 = 1 - SSE / SST
R2
pisaTrain = read.csv("pisa2009train.csv")
pisaTest = read.csv("pisa2009test.csv")
nrow(pisaTrain)
str(pisaTrain)
tapply(readingScore, male, mean)
tapply(readingScore ~ male, pisaTrain, mean)
tapply(readingScore, pisaTrain, mean)
help(tapply)
tapply(pisaTrain, c(readingScore, male), mean)
tapply(pisaTrain, c(male), mean)
tapply(pisaTrain, c(pisaTrain$readingScore, pisaTrain$male), mean)
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
summary(pisaTrain)
nrow(pisaTrain)
nrow(pisaTest)
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit(pisaTest)
nrow(pisaTrain)
nrow(pisaTest)
summary(pisaTrain)
str(pisaTrain)
pisaTrain$raceeth = relevel(pisaTrain$raceeth, White)
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White"")
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
lmScore = lm(readingScore ~ ., data=pisaTrain)
summary(lmScore)
prediction = predict(lmScore, newdata = climate_train)
prediction = predict(lmScore, newdata = pisaTrain)
SSE = sum((prediction - pisaTrain$grade)^2)
RMSE = sqrt(SSE / nrow(pisaTrain))
RMSE
SSE = sum(lmScore$residuals^2)
RMSE = sqrt(SSE / nrow(pisaTrain))
RMSE
predTest = predict(lmScore, newdata = pisaTest)
summary(predTest)
max(predTest) - min(predTest)
SSE = sum((predTest - pisaTest$grade)^2)
SSE = sum((predTest - pisaTest$grade)^2)
SST = sum((mean(pisaTest$grade) - pisaTest$grade)^2)
1 - SSE / SST
SSE
SST
predTest
predTest - pisaTest$grade
SSE = sum((predTest - pisaTest$readingScore)^2)
SST = sum((mean(pisaTest$readingScore) - pisaTest$readingScore)^2)
1 - SSE / SST
RMSE = sqrt(SSE/nrow(pisaTest))
SSE
RMSE
mean(pisaTrain$readingScore)
SST = sum((mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
SST
R2 = 1 - SSE / SST
R2
